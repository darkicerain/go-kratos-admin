// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/file"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FileUpdate builder.
func (_u *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *FileUpdate) SetUpdateTime(v time.Time) *FileUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *FileUpdate) SetNillableUpdateTime(v *time.Time) *FileUpdate {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *FileUpdate) ClearUpdateTime() *FileUpdate {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *FileUpdate) SetDeleteTime(v time.Time) *FileUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *FileUpdate) SetNillableDeleteTime(v *time.Time) *FileUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *FileUpdate) ClearDeleteTime() *FileUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *FileUpdate) SetCreateBy(v uint32) *FileUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *FileUpdate) SetNillableCreateBy(v *uint32) *FileUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *FileUpdate) AddCreateBy(v int32) *FileUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *FileUpdate) ClearCreateBy() *FileUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *FileUpdate) SetRemark(v string) *FileUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *FileUpdate) SetNillableRemark(v *string) *FileUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *FileUpdate) ClearRemark() *FileUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetProvider sets the "provider" field.
func (_u *FileUpdate) SetProvider(v file.Provider) *FileUpdate {
	_u.mutation.SetProvider(v)
	return _u
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_u *FileUpdate) SetNillableProvider(v *file.Provider) *FileUpdate {
	if v != nil {
		_u.SetProvider(*v)
	}
	return _u
}

// ClearProvider clears the value of the "provider" field.
func (_u *FileUpdate) ClearProvider() *FileUpdate {
	_u.mutation.ClearProvider()
	return _u
}

// SetBucketName sets the "bucket_name" field.
func (_u *FileUpdate) SetBucketName(v string) *FileUpdate {
	_u.mutation.SetBucketName(v)
	return _u
}

// SetNillableBucketName sets the "bucket_name" field if the given value is not nil.
func (_u *FileUpdate) SetNillableBucketName(v *string) *FileUpdate {
	if v != nil {
		_u.SetBucketName(*v)
	}
	return _u
}

// ClearBucketName clears the value of the "bucket_name" field.
func (_u *FileUpdate) ClearBucketName() *FileUpdate {
	_u.mutation.ClearBucketName()
	return _u
}

// SetFileDirectory sets the "file_directory" field.
func (_u *FileUpdate) SetFileDirectory(v string) *FileUpdate {
	_u.mutation.SetFileDirectory(v)
	return _u
}

// SetNillableFileDirectory sets the "file_directory" field if the given value is not nil.
func (_u *FileUpdate) SetNillableFileDirectory(v *string) *FileUpdate {
	if v != nil {
		_u.SetFileDirectory(*v)
	}
	return _u
}

// ClearFileDirectory clears the value of the "file_directory" field.
func (_u *FileUpdate) ClearFileDirectory() *FileUpdate {
	_u.mutation.ClearFileDirectory()
	return _u
}

// SetFileGUID sets the "file_guid" field.
func (_u *FileUpdate) SetFileGUID(v string) *FileUpdate {
	_u.mutation.SetFileGUID(v)
	return _u
}

// SetNillableFileGUID sets the "file_guid" field if the given value is not nil.
func (_u *FileUpdate) SetNillableFileGUID(v *string) *FileUpdate {
	if v != nil {
		_u.SetFileGUID(*v)
	}
	return _u
}

// ClearFileGUID clears the value of the "file_guid" field.
func (_u *FileUpdate) ClearFileGUID() *FileUpdate {
	_u.mutation.ClearFileGUID()
	return _u
}

// SetSaveFileName sets the "save_file_name" field.
func (_u *FileUpdate) SetSaveFileName(v string) *FileUpdate {
	_u.mutation.SetSaveFileName(v)
	return _u
}

// SetNillableSaveFileName sets the "save_file_name" field if the given value is not nil.
func (_u *FileUpdate) SetNillableSaveFileName(v *string) *FileUpdate {
	if v != nil {
		_u.SetSaveFileName(*v)
	}
	return _u
}

// ClearSaveFileName clears the value of the "save_file_name" field.
func (_u *FileUpdate) ClearSaveFileName() *FileUpdate {
	_u.mutation.ClearSaveFileName()
	return _u
}

// SetFileName sets the "file_name" field.
func (_u *FileUpdate) SetFileName(v string) *FileUpdate {
	_u.mutation.SetFileName(v)
	return _u
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (_u *FileUpdate) SetNillableFileName(v *string) *FileUpdate {
	if v != nil {
		_u.SetFileName(*v)
	}
	return _u
}

// ClearFileName clears the value of the "file_name" field.
func (_u *FileUpdate) ClearFileName() *FileUpdate {
	_u.mutation.ClearFileName()
	return _u
}

// SetExtension sets the "extension" field.
func (_u *FileUpdate) SetExtension(v string) *FileUpdate {
	_u.mutation.SetExtension(v)
	return _u
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (_u *FileUpdate) SetNillableExtension(v *string) *FileUpdate {
	if v != nil {
		_u.SetExtension(*v)
	}
	return _u
}

// ClearExtension clears the value of the "extension" field.
func (_u *FileUpdate) ClearExtension() *FileUpdate {
	_u.mutation.ClearExtension()
	return _u
}

// SetSize sets the "size" field.
func (_u *FileUpdate) SetSize(v uint64) *FileUpdate {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *FileUpdate) SetNillableSize(v *uint64) *FileUpdate {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *FileUpdate) AddSize(v int64) *FileUpdate {
	_u.mutation.AddSize(v)
	return _u
}

// ClearSize clears the value of the "size" field.
func (_u *FileUpdate) ClearSize() *FileUpdate {
	_u.mutation.ClearSize()
	return _u
}

// SetSizeFormat sets the "size_format" field.
func (_u *FileUpdate) SetSizeFormat(v string) *FileUpdate {
	_u.mutation.SetSizeFormat(v)
	return _u
}

// SetNillableSizeFormat sets the "size_format" field if the given value is not nil.
func (_u *FileUpdate) SetNillableSizeFormat(v *string) *FileUpdate {
	if v != nil {
		_u.SetSizeFormat(*v)
	}
	return _u
}

// ClearSizeFormat clears the value of the "size_format" field.
func (_u *FileUpdate) ClearSizeFormat() *FileUpdate {
	_u.mutation.ClearSizeFormat()
	return _u
}

// SetLinkURL sets the "link_url" field.
func (_u *FileUpdate) SetLinkURL(v string) *FileUpdate {
	_u.mutation.SetLinkURL(v)
	return _u
}

// SetNillableLinkURL sets the "link_url" field if the given value is not nil.
func (_u *FileUpdate) SetNillableLinkURL(v *string) *FileUpdate {
	if v != nil {
		_u.SetLinkURL(*v)
	}
	return _u
}

// ClearLinkURL clears the value of the "link_url" field.
func (_u *FileUpdate) ClearLinkURL() *FileUpdate {
	_u.mutation.ClearLinkURL()
	return _u
}

// SetMd5 sets the "md5" field.
func (_u *FileUpdate) SetMd5(v string) *FileUpdate {
	_u.mutation.SetMd5(v)
	return _u
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (_u *FileUpdate) SetNillableMd5(v *string) *FileUpdate {
	if v != nil {
		_u.SetMd5(*v)
	}
	return _u
}

// ClearMd5 clears the value of the "md5" field.
func (_u *FileUpdate) ClearMd5() *FileUpdate {
	_u.mutation.ClearMd5()
	return _u
}

// Mutation returns the FileMutation object of the builder.
func (_u *FileUpdate) Mutation() *FileMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileUpdate) check() error {
	if v, ok := _u.mutation.Provider(); ok {
		if err := file.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "File.provider": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *FileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *FileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(file.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(file.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(file.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(file.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(file.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(file.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(file.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(file.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(file.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(file.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(file.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Provider(); ok {
		_spec.SetField(file.FieldProvider, field.TypeEnum, value)
	}
	if _u.mutation.ProviderCleared() {
		_spec.ClearField(file.FieldProvider, field.TypeEnum)
	}
	if value, ok := _u.mutation.BucketName(); ok {
		_spec.SetField(file.FieldBucketName, field.TypeString, value)
	}
	if _u.mutation.BucketNameCleared() {
		_spec.ClearField(file.FieldBucketName, field.TypeString)
	}
	if value, ok := _u.mutation.FileDirectory(); ok {
		_spec.SetField(file.FieldFileDirectory, field.TypeString, value)
	}
	if _u.mutation.FileDirectoryCleared() {
		_spec.ClearField(file.FieldFileDirectory, field.TypeString)
	}
	if value, ok := _u.mutation.FileGUID(); ok {
		_spec.SetField(file.FieldFileGUID, field.TypeString, value)
	}
	if _u.mutation.FileGUIDCleared() {
		_spec.ClearField(file.FieldFileGUID, field.TypeString)
	}
	if value, ok := _u.mutation.SaveFileName(); ok {
		_spec.SetField(file.FieldSaveFileName, field.TypeString, value)
	}
	if _u.mutation.SaveFileNameCleared() {
		_spec.ClearField(file.FieldSaveFileName, field.TypeString)
	}
	if value, ok := _u.mutation.FileName(); ok {
		_spec.SetField(file.FieldFileName, field.TypeString, value)
	}
	if _u.mutation.FileNameCleared() {
		_spec.ClearField(file.FieldFileName, field.TypeString)
	}
	if value, ok := _u.mutation.Extension(); ok {
		_spec.SetField(file.FieldExtension, field.TypeString, value)
	}
	if _u.mutation.ExtensionCleared() {
		_spec.ClearField(file.FieldExtension, field.TypeString)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeUint64, value)
	}
	if _u.mutation.SizeCleared() {
		_spec.ClearField(file.FieldSize, field.TypeUint64)
	}
	if value, ok := _u.mutation.SizeFormat(); ok {
		_spec.SetField(file.FieldSizeFormat, field.TypeString, value)
	}
	if _u.mutation.SizeFormatCleared() {
		_spec.ClearField(file.FieldSizeFormat, field.TypeString)
	}
	if value, ok := _u.mutation.LinkURL(); ok {
		_spec.SetField(file.FieldLinkURL, field.TypeString, value)
	}
	if _u.mutation.LinkURLCleared() {
		_spec.ClearField(file.FieldLinkURL, field.TypeString)
	}
	if value, ok := _u.mutation.Md5(); ok {
		_spec.SetField(file.FieldMd5, field.TypeString, value)
	}
	if _u.mutation.Md5Cleared() {
		_spec.ClearField(file.FieldMd5, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (_u *FileUpdateOne) SetUpdateTime(v time.Time) *FileUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableUpdateTime(v *time.Time) *FileUpdateOne {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *FileUpdateOne) ClearUpdateTime() *FileUpdateOne {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *FileUpdateOne) SetDeleteTime(v time.Time) *FileUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableDeleteTime(v *time.Time) *FileUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *FileUpdateOne) ClearDeleteTime() *FileUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *FileUpdateOne) SetCreateBy(v uint32) *FileUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableCreateBy(v *uint32) *FileUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *FileUpdateOne) AddCreateBy(v int32) *FileUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *FileUpdateOne) ClearCreateBy() *FileUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *FileUpdateOne) SetRemark(v string) *FileUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableRemark(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *FileUpdateOne) ClearRemark() *FileUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetProvider sets the "provider" field.
func (_u *FileUpdateOne) SetProvider(v file.Provider) *FileUpdateOne {
	_u.mutation.SetProvider(v)
	return _u
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableProvider(v *file.Provider) *FileUpdateOne {
	if v != nil {
		_u.SetProvider(*v)
	}
	return _u
}

// ClearProvider clears the value of the "provider" field.
func (_u *FileUpdateOne) ClearProvider() *FileUpdateOne {
	_u.mutation.ClearProvider()
	return _u
}

// SetBucketName sets the "bucket_name" field.
func (_u *FileUpdateOne) SetBucketName(v string) *FileUpdateOne {
	_u.mutation.SetBucketName(v)
	return _u
}

// SetNillableBucketName sets the "bucket_name" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableBucketName(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetBucketName(*v)
	}
	return _u
}

// ClearBucketName clears the value of the "bucket_name" field.
func (_u *FileUpdateOne) ClearBucketName() *FileUpdateOne {
	_u.mutation.ClearBucketName()
	return _u
}

// SetFileDirectory sets the "file_directory" field.
func (_u *FileUpdateOne) SetFileDirectory(v string) *FileUpdateOne {
	_u.mutation.SetFileDirectory(v)
	return _u
}

// SetNillableFileDirectory sets the "file_directory" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableFileDirectory(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetFileDirectory(*v)
	}
	return _u
}

// ClearFileDirectory clears the value of the "file_directory" field.
func (_u *FileUpdateOne) ClearFileDirectory() *FileUpdateOne {
	_u.mutation.ClearFileDirectory()
	return _u
}

// SetFileGUID sets the "file_guid" field.
func (_u *FileUpdateOne) SetFileGUID(v string) *FileUpdateOne {
	_u.mutation.SetFileGUID(v)
	return _u
}

// SetNillableFileGUID sets the "file_guid" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableFileGUID(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetFileGUID(*v)
	}
	return _u
}

// ClearFileGUID clears the value of the "file_guid" field.
func (_u *FileUpdateOne) ClearFileGUID() *FileUpdateOne {
	_u.mutation.ClearFileGUID()
	return _u
}

// SetSaveFileName sets the "save_file_name" field.
func (_u *FileUpdateOne) SetSaveFileName(v string) *FileUpdateOne {
	_u.mutation.SetSaveFileName(v)
	return _u
}

// SetNillableSaveFileName sets the "save_file_name" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableSaveFileName(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetSaveFileName(*v)
	}
	return _u
}

// ClearSaveFileName clears the value of the "save_file_name" field.
func (_u *FileUpdateOne) ClearSaveFileName() *FileUpdateOne {
	_u.mutation.ClearSaveFileName()
	return _u
}

// SetFileName sets the "file_name" field.
func (_u *FileUpdateOne) SetFileName(v string) *FileUpdateOne {
	_u.mutation.SetFileName(v)
	return _u
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableFileName(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetFileName(*v)
	}
	return _u
}

// ClearFileName clears the value of the "file_name" field.
func (_u *FileUpdateOne) ClearFileName() *FileUpdateOne {
	_u.mutation.ClearFileName()
	return _u
}

// SetExtension sets the "extension" field.
func (_u *FileUpdateOne) SetExtension(v string) *FileUpdateOne {
	_u.mutation.SetExtension(v)
	return _u
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableExtension(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetExtension(*v)
	}
	return _u
}

// ClearExtension clears the value of the "extension" field.
func (_u *FileUpdateOne) ClearExtension() *FileUpdateOne {
	_u.mutation.ClearExtension()
	return _u
}

// SetSize sets the "size" field.
func (_u *FileUpdateOne) SetSize(v uint64) *FileUpdateOne {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableSize(v *uint64) *FileUpdateOne {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *FileUpdateOne) AddSize(v int64) *FileUpdateOne {
	_u.mutation.AddSize(v)
	return _u
}

// ClearSize clears the value of the "size" field.
func (_u *FileUpdateOne) ClearSize() *FileUpdateOne {
	_u.mutation.ClearSize()
	return _u
}

// SetSizeFormat sets the "size_format" field.
func (_u *FileUpdateOne) SetSizeFormat(v string) *FileUpdateOne {
	_u.mutation.SetSizeFormat(v)
	return _u
}

// SetNillableSizeFormat sets the "size_format" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableSizeFormat(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetSizeFormat(*v)
	}
	return _u
}

// ClearSizeFormat clears the value of the "size_format" field.
func (_u *FileUpdateOne) ClearSizeFormat() *FileUpdateOne {
	_u.mutation.ClearSizeFormat()
	return _u
}

// SetLinkURL sets the "link_url" field.
func (_u *FileUpdateOne) SetLinkURL(v string) *FileUpdateOne {
	_u.mutation.SetLinkURL(v)
	return _u
}

// SetNillableLinkURL sets the "link_url" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableLinkURL(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetLinkURL(*v)
	}
	return _u
}

// ClearLinkURL clears the value of the "link_url" field.
func (_u *FileUpdateOne) ClearLinkURL() *FileUpdateOne {
	_u.mutation.ClearLinkURL()
	return _u
}

// SetMd5 sets the "md5" field.
func (_u *FileUpdateOne) SetMd5(v string) *FileUpdateOne {
	_u.mutation.SetMd5(v)
	return _u
}

// SetNillableMd5 sets the "md5" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableMd5(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetMd5(*v)
	}
	return _u
}

// ClearMd5 clears the value of the "md5" field.
func (_u *FileUpdateOne) ClearMd5() *FileUpdateOne {
	_u.mutation.ClearMd5()
	return _u
}

// Mutation returns the FileMutation object of the builder.
func (_u *FileUpdateOne) Mutation() *FileMutation {
	return _u.mutation
}

// Where appends a list predicates to the FileUpdate builder.
func (_u *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated File entity.
func (_u *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileUpdateOne) check() error {
	if v, ok := _u.mutation.Provider(); ok {
		if err := file.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "File.provider": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *FileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(file.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(file.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(file.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(file.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(file.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(file.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(file.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(file.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(file.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(file.FieldRemark, field.TypeString)
	}
	if _u.mutation.TenantIDCleared() {
		_spec.ClearField(file.FieldTenantID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Provider(); ok {
		_spec.SetField(file.FieldProvider, field.TypeEnum, value)
	}
	if _u.mutation.ProviderCleared() {
		_spec.ClearField(file.FieldProvider, field.TypeEnum)
	}
	if value, ok := _u.mutation.BucketName(); ok {
		_spec.SetField(file.FieldBucketName, field.TypeString, value)
	}
	if _u.mutation.BucketNameCleared() {
		_spec.ClearField(file.FieldBucketName, field.TypeString)
	}
	if value, ok := _u.mutation.FileDirectory(); ok {
		_spec.SetField(file.FieldFileDirectory, field.TypeString, value)
	}
	if _u.mutation.FileDirectoryCleared() {
		_spec.ClearField(file.FieldFileDirectory, field.TypeString)
	}
	if value, ok := _u.mutation.FileGUID(); ok {
		_spec.SetField(file.FieldFileGUID, field.TypeString, value)
	}
	if _u.mutation.FileGUIDCleared() {
		_spec.ClearField(file.FieldFileGUID, field.TypeString)
	}
	if value, ok := _u.mutation.SaveFileName(); ok {
		_spec.SetField(file.FieldSaveFileName, field.TypeString, value)
	}
	if _u.mutation.SaveFileNameCleared() {
		_spec.ClearField(file.FieldSaveFileName, field.TypeString)
	}
	if value, ok := _u.mutation.FileName(); ok {
		_spec.SetField(file.FieldFileName, field.TypeString, value)
	}
	if _u.mutation.FileNameCleared() {
		_spec.ClearField(file.FieldFileName, field.TypeString)
	}
	if value, ok := _u.mutation.Extension(); ok {
		_spec.SetField(file.FieldExtension, field.TypeString, value)
	}
	if _u.mutation.ExtensionCleared() {
		_spec.ClearField(file.FieldExtension, field.TypeString)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeUint64, value)
	}
	if _u.mutation.SizeCleared() {
		_spec.ClearField(file.FieldSize, field.TypeUint64)
	}
	if value, ok := _u.mutation.SizeFormat(); ok {
		_spec.SetField(file.FieldSizeFormat, field.TypeString, value)
	}
	if _u.mutation.SizeFormatCleared() {
		_spec.ClearField(file.FieldSizeFormat, field.TypeString)
	}
	if value, ok := _u.mutation.LinkURL(); ok {
		_spec.SetField(file.FieldLinkURL, field.TypeString, value)
	}
	if _u.mutation.LinkURLCleared() {
		_spec.ClearField(file.FieldLinkURL, field.TypeString)
	}
	if value, ok := _u.mutation.Md5(); ok {
		_spec.SetField(file.FieldMd5, field.TypeString, value)
	}
	if _u.mutation.Md5Cleared() {
		_spec.ClearField(file.FieldMd5, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &File{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
