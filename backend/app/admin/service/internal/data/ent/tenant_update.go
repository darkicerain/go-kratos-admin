// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"kratos-admin/app/admin/service/internal/data/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks     []Hook
	mutation  *TenantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TenantUpdate builder.
func (_u *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *TenantUpdate) SetUpdateTime(v time.Time) *TenantUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableUpdateTime(v *time.Time) *TenantUpdate {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *TenantUpdate) ClearUpdateTime() *TenantUpdate {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *TenantUpdate) SetDeleteTime(v time.Time) *TenantUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableDeleteTime(v *time.Time) *TenantUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *TenantUpdate) ClearDeleteTime() *TenantUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetStatus sets the "status" field.
func (_u *TenantUpdate) SetStatus(v tenant.Status) *TenantUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableStatus(v *tenant.Status) *TenantUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *TenantUpdate) ClearStatus() *TenantUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *TenantUpdate) SetCreateBy(v uint32) *TenantUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableCreateBy(v *uint32) *TenantUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *TenantUpdate) AddCreateBy(v int32) *TenantUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *TenantUpdate) ClearCreateBy() *TenantUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *TenantUpdate) SetUpdateBy(v uint32) *TenantUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableUpdateBy(v *uint32) *TenantUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *TenantUpdate) AddUpdateBy(v int32) *TenantUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *TenantUpdate) ClearUpdateBy() *TenantUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *TenantUpdate) SetRemark(v string) *TenantUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableRemark(v *string) *TenantUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *TenantUpdate) ClearRemark() *TenantUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetName sets the "name" field.
func (_u *TenantUpdate) SetName(v string) *TenantUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableName(v *string) *TenantUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *TenantUpdate) ClearName() *TenantUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetCode sets the "code" field.
func (_u *TenantUpdate) SetCode(v string) *TenantUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableCode(v *string) *TenantUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *TenantUpdate) ClearCode() *TenantUpdate {
	_u.mutation.ClearCode()
	return _u
}

// SetMemberCount sets the "member_count" field.
func (_u *TenantUpdate) SetMemberCount(v int32) *TenantUpdate {
	_u.mutation.ResetMemberCount()
	_u.mutation.SetMemberCount(v)
	return _u
}

// SetNillableMemberCount sets the "member_count" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableMemberCount(v *int32) *TenantUpdate {
	if v != nil {
		_u.SetMemberCount(*v)
	}
	return _u
}

// AddMemberCount adds value to the "member_count" field.
func (_u *TenantUpdate) AddMemberCount(v int32) *TenantUpdate {
	_u.mutation.AddMemberCount(v)
	return _u
}

// ClearMemberCount clears the value of the "member_count" field.
func (_u *TenantUpdate) ClearMemberCount() *TenantUpdate {
	_u.mutation.ClearMemberCount()
	return _u
}

// SetSubscriptionAt sets the "subscription_at" field.
func (_u *TenantUpdate) SetSubscriptionAt(v time.Time) *TenantUpdate {
	_u.mutation.SetSubscriptionAt(v)
	return _u
}

// SetNillableSubscriptionAt sets the "subscription_at" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableSubscriptionAt(v *time.Time) *TenantUpdate {
	if v != nil {
		_u.SetSubscriptionAt(*v)
	}
	return _u
}

// ClearSubscriptionAt clears the value of the "subscription_at" field.
func (_u *TenantUpdate) ClearSubscriptionAt() *TenantUpdate {
	_u.mutation.ClearSubscriptionAt()
	return _u
}

// SetUnsubscribeAt sets the "unsubscribe_at" field.
func (_u *TenantUpdate) SetUnsubscribeAt(v time.Time) *TenantUpdate {
	_u.mutation.SetUnsubscribeAt(v)
	return _u
}

// SetNillableUnsubscribeAt sets the "unsubscribe_at" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableUnsubscribeAt(v *time.Time) *TenantUpdate {
	if v != nil {
		_u.SetUnsubscribeAt(*v)
	}
	return _u
}

// ClearUnsubscribeAt clears the value of the "unsubscribe_at" field.
func (_u *TenantUpdate) ClearUnsubscribeAt() *TenantUpdate {
	_u.mutation.ClearUnsubscribeAt()
	return _u
}

// Mutation returns the TenantMutation object of the builder.
func (_u *TenantUpdate) Mutation() *TenantMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TenantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TenantUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TenantUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TenantUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := tenant.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Tenant.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := tenant.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Tenant.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TenantUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TenantUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(tenant.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(tenant.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(tenant.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(tenant.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(tenant.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(tenant.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(tenant.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(tenant.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(tenant.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(tenant.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(tenant.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(tenant.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(tenant.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(tenant.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(tenant.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(tenant.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.MemberCount(); ok {
		_spec.SetField(tenant.FieldMemberCount, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMemberCount(); ok {
		_spec.AddField(tenant.FieldMemberCount, field.TypeInt32, value)
	}
	if _u.mutation.MemberCountCleared() {
		_spec.ClearField(tenant.FieldMemberCount, field.TypeInt32)
	}
	if value, ok := _u.mutation.SubscriptionAt(); ok {
		_spec.SetField(tenant.FieldSubscriptionAt, field.TypeTime, value)
	}
	if _u.mutation.SubscriptionAtCleared() {
		_spec.ClearField(tenant.FieldSubscriptionAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UnsubscribeAt(); ok {
		_spec.SetField(tenant.FieldUnsubscribeAt, field.TypeTime, value)
	}
	if _u.mutation.UnsubscribeAtCleared() {
		_spec.ClearField(tenant.FieldUnsubscribeAt, field.TypeTime)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TenantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (_u *TenantUpdateOne) SetUpdateTime(v time.Time) *TenantUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableUpdateTime(v *time.Time) *TenantUpdateOne {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *TenantUpdateOne) ClearUpdateTime() *TenantUpdateOne {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *TenantUpdateOne) SetDeleteTime(v time.Time) *TenantUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableDeleteTime(v *time.Time) *TenantUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *TenantUpdateOne) ClearDeleteTime() *TenantUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetStatus sets the "status" field.
func (_u *TenantUpdateOne) SetStatus(v tenant.Status) *TenantUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableStatus(v *tenant.Status) *TenantUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *TenantUpdateOne) ClearStatus() *TenantUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *TenantUpdateOne) SetCreateBy(v uint32) *TenantUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableCreateBy(v *uint32) *TenantUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *TenantUpdateOne) AddCreateBy(v int32) *TenantUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *TenantUpdateOne) ClearCreateBy() *TenantUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *TenantUpdateOne) SetUpdateBy(v uint32) *TenantUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableUpdateBy(v *uint32) *TenantUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *TenantUpdateOne) AddUpdateBy(v int32) *TenantUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *TenantUpdateOne) ClearUpdateBy() *TenantUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *TenantUpdateOne) SetRemark(v string) *TenantUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableRemark(v *string) *TenantUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *TenantUpdateOne) ClearRemark() *TenantUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetName sets the "name" field.
func (_u *TenantUpdateOne) SetName(v string) *TenantUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableName(v *string) *TenantUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *TenantUpdateOne) ClearName() *TenantUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetCode sets the "code" field.
func (_u *TenantUpdateOne) SetCode(v string) *TenantUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableCode(v *string) *TenantUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// ClearCode clears the value of the "code" field.
func (_u *TenantUpdateOne) ClearCode() *TenantUpdateOne {
	_u.mutation.ClearCode()
	return _u
}

// SetMemberCount sets the "member_count" field.
func (_u *TenantUpdateOne) SetMemberCount(v int32) *TenantUpdateOne {
	_u.mutation.ResetMemberCount()
	_u.mutation.SetMemberCount(v)
	return _u
}

// SetNillableMemberCount sets the "member_count" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableMemberCount(v *int32) *TenantUpdateOne {
	if v != nil {
		_u.SetMemberCount(*v)
	}
	return _u
}

// AddMemberCount adds value to the "member_count" field.
func (_u *TenantUpdateOne) AddMemberCount(v int32) *TenantUpdateOne {
	_u.mutation.AddMemberCount(v)
	return _u
}

// ClearMemberCount clears the value of the "member_count" field.
func (_u *TenantUpdateOne) ClearMemberCount() *TenantUpdateOne {
	_u.mutation.ClearMemberCount()
	return _u
}

// SetSubscriptionAt sets the "subscription_at" field.
func (_u *TenantUpdateOne) SetSubscriptionAt(v time.Time) *TenantUpdateOne {
	_u.mutation.SetSubscriptionAt(v)
	return _u
}

// SetNillableSubscriptionAt sets the "subscription_at" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableSubscriptionAt(v *time.Time) *TenantUpdateOne {
	if v != nil {
		_u.SetSubscriptionAt(*v)
	}
	return _u
}

// ClearSubscriptionAt clears the value of the "subscription_at" field.
func (_u *TenantUpdateOne) ClearSubscriptionAt() *TenantUpdateOne {
	_u.mutation.ClearSubscriptionAt()
	return _u
}

// SetUnsubscribeAt sets the "unsubscribe_at" field.
func (_u *TenantUpdateOne) SetUnsubscribeAt(v time.Time) *TenantUpdateOne {
	_u.mutation.SetUnsubscribeAt(v)
	return _u
}

// SetNillableUnsubscribeAt sets the "unsubscribe_at" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableUnsubscribeAt(v *time.Time) *TenantUpdateOne {
	if v != nil {
		_u.SetUnsubscribeAt(*v)
	}
	return _u
}

// ClearUnsubscribeAt clears the value of the "unsubscribe_at" field.
func (_u *TenantUpdateOne) ClearUnsubscribeAt() *TenantUpdateOne {
	_u.mutation.ClearUnsubscribeAt()
	return _u
}

// Mutation returns the TenantMutation object of the builder.
func (_u *TenantUpdateOne) Mutation() *TenantMutation {
	return _u.mutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (_u *TenantUpdateOne) Where(ps ...predicate.Tenant) *TenantUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Tenant entity.
func (_u *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TenantUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := tenant.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Tenant.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := tenant.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Tenant.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TenantUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(tenant.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(tenant.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(tenant.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(tenant.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(tenant.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(tenant.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(tenant.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(tenant.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(tenant.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(tenant.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(tenant.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(tenant.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(tenant.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(tenant.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(tenant.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
	}
	if _u.mutation.CodeCleared() {
		_spec.ClearField(tenant.FieldCode, field.TypeString)
	}
	if value, ok := _u.mutation.MemberCount(); ok {
		_spec.SetField(tenant.FieldMemberCount, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMemberCount(); ok {
		_spec.AddField(tenant.FieldMemberCount, field.TypeInt32, value)
	}
	if _u.mutation.MemberCountCleared() {
		_spec.ClearField(tenant.FieldMemberCount, field.TypeInt32)
	}
	if value, ok := _u.mutation.SubscriptionAt(); ok {
		_spec.SetField(tenant.FieldSubscriptionAt, field.TypeTime, value)
	}
	if _u.mutation.SubscriptionAtCleared() {
		_spec.ClearField(tenant.FieldSubscriptionAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UnsubscribeAt(); ok {
		_spec.SetField(tenant.FieldUnsubscribeAt, field.TypeTime, value)
	}
	if _u.mutation.UnsubscribeAtCleared() {
		_spec.ClearField(tenant.FieldUnsubscribeAt, field.TypeTime)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Tenant{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
