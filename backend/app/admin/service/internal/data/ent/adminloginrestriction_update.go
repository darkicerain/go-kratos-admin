// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-admin/app/admin/service/internal/data/ent/adminloginrestriction"
	"kratos-admin/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminLoginRestrictionUpdate is the builder for updating AdminLoginRestriction entities.
type AdminLoginRestrictionUpdate struct {
	config
	hooks     []Hook
	mutation  *AdminLoginRestrictionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AdminLoginRestrictionUpdate builder.
func (_u *AdminLoginRestrictionUpdate) Where(ps ...predicate.AdminLoginRestriction) *AdminLoginRestrictionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *AdminLoginRestrictionUpdate) SetUpdateTime(v time.Time) *AdminLoginRestrictionUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableUpdateTime(v *time.Time) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *AdminLoginRestrictionUpdate) ClearUpdateTime() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *AdminLoginRestrictionUpdate) SetDeleteTime(v time.Time) *AdminLoginRestrictionUpdate {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableDeleteTime(v *time.Time) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *AdminLoginRestrictionUpdate) ClearDeleteTime() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *AdminLoginRestrictionUpdate) SetCreateBy(v uint32) *AdminLoginRestrictionUpdate {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableCreateBy(v *uint32) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *AdminLoginRestrictionUpdate) AddCreateBy(v int32) *AdminLoginRestrictionUpdate {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *AdminLoginRestrictionUpdate) ClearCreateBy() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *AdminLoginRestrictionUpdate) SetUpdateBy(v uint32) *AdminLoginRestrictionUpdate {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableUpdateBy(v *uint32) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *AdminLoginRestrictionUpdate) AddUpdateBy(v int32) *AdminLoginRestrictionUpdate {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *AdminLoginRestrictionUpdate) ClearUpdateBy() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetTargetID sets the "target_id" field.
func (_u *AdminLoginRestrictionUpdate) SetTargetID(v uint32) *AdminLoginRestrictionUpdate {
	_u.mutation.ResetTargetID()
	_u.mutation.SetTargetID(v)
	return _u
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableTargetID(v *uint32) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetTargetID(*v)
	}
	return _u
}

// AddTargetID adds value to the "target_id" field.
func (_u *AdminLoginRestrictionUpdate) AddTargetID(v int32) *AdminLoginRestrictionUpdate {
	_u.mutation.AddTargetID(v)
	return _u
}

// ClearTargetID clears the value of the "target_id" field.
func (_u *AdminLoginRestrictionUpdate) ClearTargetID() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearTargetID()
	return _u
}

// SetValue sets the "value" field.
func (_u *AdminLoginRestrictionUpdate) SetValue(v string) *AdminLoginRestrictionUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableValue(v *string) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *AdminLoginRestrictionUpdate) ClearValue() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearValue()
	return _u
}

// SetReason sets the "reason" field.
func (_u *AdminLoginRestrictionUpdate) SetReason(v string) *AdminLoginRestrictionUpdate {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableReason(v *string) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *AdminLoginRestrictionUpdate) ClearReason() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearReason()
	return _u
}

// SetType sets the "type" field.
func (_u *AdminLoginRestrictionUpdate) SetType(v adminloginrestriction.Type) *AdminLoginRestrictionUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableType(v *adminloginrestriction.Type) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *AdminLoginRestrictionUpdate) ClearType() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetMethod sets the "method" field.
func (_u *AdminLoginRestrictionUpdate) SetMethod(v adminloginrestriction.Method) *AdminLoginRestrictionUpdate {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdate) SetNillableMethod(v *adminloginrestriction.Method) *AdminLoginRestrictionUpdate {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *AdminLoginRestrictionUpdate) ClearMethod() *AdminLoginRestrictionUpdate {
	_u.mutation.ClearMethod()
	return _u
}

// Mutation returns the AdminLoginRestrictionMutation object of the builder.
func (_u *AdminLoginRestrictionUpdate) Mutation() *AdminLoginRestrictionMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AdminLoginRestrictionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AdminLoginRestrictionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AdminLoginRestrictionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AdminLoginRestrictionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AdminLoginRestrictionUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := adminloginrestriction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AdminLoginRestriction.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Method(); ok {
		if err := adminloginrestriction.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "AdminLoginRestriction.method": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AdminLoginRestrictionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdminLoginRestrictionUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AdminLoginRestrictionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(adminloginrestriction.Table, adminloginrestriction.Columns, sqlgraph.NewFieldSpec(adminloginrestriction.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(adminloginrestriction.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(adminloginrestriction.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(adminloginrestriction.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(adminloginrestriction.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(adminloginrestriction.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(adminloginrestriction.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(adminloginrestriction.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(adminloginrestriction.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(adminloginrestriction.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(adminloginrestriction.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(adminloginrestriction.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.TargetID(); ok {
		_spec.SetField(adminloginrestriction.FieldTargetID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedTargetID(); ok {
		_spec.AddField(adminloginrestriction.FieldTargetID, field.TypeUint32, value)
	}
	if _u.mutation.TargetIDCleared() {
		_spec.ClearField(adminloginrestriction.FieldTargetID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(adminloginrestriction.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(adminloginrestriction.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(adminloginrestriction.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(adminloginrestriction.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(adminloginrestriction.FieldType, field.TypeEnum, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(adminloginrestriction.FieldType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(adminloginrestriction.FieldMethod, field.TypeEnum, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(adminloginrestriction.FieldMethod, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminloginrestriction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AdminLoginRestrictionUpdateOne is the builder for updating a single AdminLoginRestriction entity.
type AdminLoginRestrictionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AdminLoginRestrictionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (_u *AdminLoginRestrictionUpdateOne) SetUpdateTime(v time.Time) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableUpdateTime(v *time.Time) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetUpdateTime(*v)
	}
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearUpdateTime() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetDeleteTime sets the "delete_time" field.
func (_u *AdminLoginRestrictionUpdateOne) SetDeleteTime(v time.Time) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetDeleteTime(v)
	return _u
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableDeleteTime(v *time.Time) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetDeleteTime(*v)
	}
	return _u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearDeleteTime() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearDeleteTime()
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *AdminLoginRestrictionUpdateOne) SetCreateBy(v uint32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.ResetCreateBy()
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableCreateBy(v *uint32) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// AddCreateBy adds value to the "create_by" field.
func (_u *AdminLoginRestrictionUpdateOne) AddCreateBy(v int32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.AddCreateBy(v)
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearCreateBy() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *AdminLoginRestrictionUpdateOne) SetUpdateBy(v uint32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.ResetUpdateBy()
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableUpdateBy(v *uint32) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// AddUpdateBy adds value to the "update_by" field.
func (_u *AdminLoginRestrictionUpdateOne) AddUpdateBy(v int32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.AddUpdateBy(v)
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearUpdateBy() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetTargetID sets the "target_id" field.
func (_u *AdminLoginRestrictionUpdateOne) SetTargetID(v uint32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.ResetTargetID()
	_u.mutation.SetTargetID(v)
	return _u
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableTargetID(v *uint32) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetTargetID(*v)
	}
	return _u
}

// AddTargetID adds value to the "target_id" field.
func (_u *AdminLoginRestrictionUpdateOne) AddTargetID(v int32) *AdminLoginRestrictionUpdateOne {
	_u.mutation.AddTargetID(v)
	return _u
}

// ClearTargetID clears the value of the "target_id" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearTargetID() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearTargetID()
	return _u
}

// SetValue sets the "value" field.
func (_u *AdminLoginRestrictionUpdateOne) SetValue(v string) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableValue(v *string) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearValue() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearValue()
	return _u
}

// SetReason sets the "reason" field.
func (_u *AdminLoginRestrictionUpdateOne) SetReason(v string) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableReason(v *string) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// ClearReason clears the value of the "reason" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearReason() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearReason()
	return _u
}

// SetType sets the "type" field.
func (_u *AdminLoginRestrictionUpdateOne) SetType(v adminloginrestriction.Type) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableType(v *adminloginrestriction.Type) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearType() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetMethod sets the "method" field.
func (_u *AdminLoginRestrictionUpdateOne) SetMethod(v adminloginrestriction.Method) *AdminLoginRestrictionUpdateOne {
	_u.mutation.SetMethod(v)
	return _u
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (_u *AdminLoginRestrictionUpdateOne) SetNillableMethod(v *adminloginrestriction.Method) *AdminLoginRestrictionUpdateOne {
	if v != nil {
		_u.SetMethod(*v)
	}
	return _u
}

// ClearMethod clears the value of the "method" field.
func (_u *AdminLoginRestrictionUpdateOne) ClearMethod() *AdminLoginRestrictionUpdateOne {
	_u.mutation.ClearMethod()
	return _u
}

// Mutation returns the AdminLoginRestrictionMutation object of the builder.
func (_u *AdminLoginRestrictionUpdateOne) Mutation() *AdminLoginRestrictionMutation {
	return _u.mutation
}

// Where appends a list predicates to the AdminLoginRestrictionUpdate builder.
func (_u *AdminLoginRestrictionUpdateOne) Where(ps ...predicate.AdminLoginRestriction) *AdminLoginRestrictionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AdminLoginRestrictionUpdateOne) Select(field string, fields ...string) *AdminLoginRestrictionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AdminLoginRestriction entity.
func (_u *AdminLoginRestrictionUpdateOne) Save(ctx context.Context) (*AdminLoginRestriction, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AdminLoginRestrictionUpdateOne) SaveX(ctx context.Context) *AdminLoginRestriction {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AdminLoginRestrictionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AdminLoginRestrictionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AdminLoginRestrictionUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := adminloginrestriction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AdminLoginRestriction.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Method(); ok {
		if err := adminloginrestriction.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "AdminLoginRestriction.method": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AdminLoginRestrictionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdminLoginRestrictionUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AdminLoginRestrictionUpdateOne) sqlSave(ctx context.Context) (_node *AdminLoginRestriction, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(adminloginrestriction.Table, adminloginrestriction.Columns, sqlgraph.NewFieldSpec(adminloginrestriction.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AdminLoginRestriction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminloginrestriction.FieldID)
		for _, f := range fields {
			if !adminloginrestriction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminloginrestriction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreateTimeCleared() {
		_spec.ClearField(adminloginrestriction.FieldCreateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(adminloginrestriction.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(adminloginrestriction.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.DeleteTime(); ok {
		_spec.SetField(adminloginrestriction.FieldDeleteTime, field.TypeTime, value)
	}
	if _u.mutation.DeleteTimeCleared() {
		_spec.ClearField(adminloginrestriction.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(adminloginrestriction.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCreateBy(); ok {
		_spec.AddField(adminloginrestriction.FieldCreateBy, field.TypeUint32, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(adminloginrestriction.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(adminloginrestriction.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUpdateBy(); ok {
		_spec.AddField(adminloginrestriction.FieldUpdateBy, field.TypeUint32, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(adminloginrestriction.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := _u.mutation.TargetID(); ok {
		_spec.SetField(adminloginrestriction.FieldTargetID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedTargetID(); ok {
		_spec.AddField(adminloginrestriction.FieldTargetID, field.TypeUint32, value)
	}
	if _u.mutation.TargetIDCleared() {
		_spec.ClearField(adminloginrestriction.FieldTargetID, field.TypeUint32)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(adminloginrestriction.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(adminloginrestriction.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(adminloginrestriction.FieldReason, field.TypeString, value)
	}
	if _u.mutation.ReasonCleared() {
		_spec.ClearField(adminloginrestriction.FieldReason, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(adminloginrestriction.FieldType, field.TypeEnum, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(adminloginrestriction.FieldType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Method(); ok {
		_spec.SetField(adminloginrestriction.FieldMethod, field.TypeEnum, value)
	}
	if _u.mutation.MethodCleared() {
		_spec.ClearField(adminloginrestriction.FieldMethod, field.TypeEnum)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &AdminLoginRestriction{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminloginrestriction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
